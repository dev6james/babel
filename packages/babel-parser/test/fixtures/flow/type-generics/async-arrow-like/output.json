{
  "type": "File",
  "program": {
    "type": "Program",
    "sourceType": "module",
    "interpreter": null,
    "body": [
      {
        "type": "ExpressionStatement",
        "expression": {
          "type": "BinaryExpression",
          "left": {
            "type": "BinaryExpression",
            "left": {
              "type": "Identifier",
              "name": "async"
            },
            "operator": "<",
            "right": {
              "type": "Identifier",
              "name": "T"
            }
          },
          "operator": ">",
          "right": {
            "type": "TypeCastExpression",
            "expression": {
              "type": "Identifier",
              "name": "fn"
            },
            "typeAnnotation": {
              "type": "TypeAnnotation",
              "typeAnnotation": {
                "type": "FunctionTypeAnnotation",
                "params": [],
                "rest": null,
                "returnType": {
                  "type": "GenericTypeAnnotation",
                  "typeParameters": null,
                  "id": {
                    "type": "Identifier",
                    "name": "T"
                  }
                },
                "typeParameters": null
              }
            },
            "extra": {
              "parenthesized": true,
              "parenStart": 9
            }
          }
        }
      },
      {
        "type": "ExpressionStatement",
        "expression": {
          "type": "TypeCastExpression",
          "expression": {
            "type": "BinaryExpression",
            "left": {
              "type": "BinaryExpression",
              "left": {
                "type": "Identifier",
                "name": "async"
              },
              "operator": "<",
              "right": {
                "type": "BinaryExpression",
                "left": {
                  "type": "Identifier",
                  "name": "T"
                },
                "operator": "+",
                "right": {
                  "type": "Identifier",
                  "name": "U"
                }
              }
            },
            "operator": ">",
            "right": {
              "type": "TypeCastExpression",
              "expression": {
                "type": "Identifier",
                "name": "fn"
              },
              "typeAnnotation": {
                "type": "TypeAnnotation",
                "typeAnnotation": {
                  "type": "GenericTypeAnnotation",
                  "typeParameters": null,
                  "id": {
                    "type": "Identifier",
                    "name": "T"
                  }
                }
              },
              "extra": {
                "parenthesized": true,
                "parenStart": 149
              }
            }
          },
          "typeAnnotation": {
            "type": "TypeAnnotation",
            "typeAnnotation": {
              "type": "FunctionTypeAnnotation",
              "params": [
                {
                  "type": "FunctionTypeParam",
                  "name": null,
                  "optional": false,
                  "typeAnnotation": {
                    "type": "GenericTypeAnnotation",
                    "typeParameters": null,
                    "id": {
                      "type": "Identifier",
                      "name": "T"
                    }
                  }
                }
              ],
              "rest": null,
              "returnType": {
                "type": "GenericTypeAnnotation",
                "typeParameters": null,
                "id": {
                  "type": "Identifier",
                  "name": "fn"
                }
              },
              "typeParameters": null
            }
          },
          "extra": {
            "parenthesized": true,
            "parenStart": 135
          }
        }
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentLine",
      "value": " This looks A LOT like an async arrow function, but it isn't because"
    },
    {
      "type": "CommentLine",
      "value": " T + U isn't a valid type parameter."
    }
  ]
}
